import java.io.*;
import java.util.Scanner;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.nio.file.*;

public class Myfiles {

    public static void listDirectory(String dir) {

        try {
            File dirFile = new File(dir);
            String[] res = dirFile.list();

            for(String s : res) {
                System.out.print(s + " ");
            }
            System.out.print("\n");
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static void listPythonFiles(String dir) {

        try {
            File dirFile = new File(dir);
            String[] res = dirFile.list();

            for(String s : res) {
                if (s.endsWith(".py")) {
                    System.out.print(s + " ");
                }
            }
            System.out.print("\n");
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static void isFileDirectory(String dir) {

        try {
            File dirFile = new File(dir);

            System.out.println(dirFile.isDirectory());
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static void defineDirectory(String dir) {

        try {
            File dirFile = new File(dir);

            if (dirFile.isDirectory()) {
                System.out.println("Directory");
            } else {
                System.out.println("File");
            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static void defineMode(String dir) {

        try {
            File dirFile = new File(dir);
            String res = "";

            if (dirFile.canRead()) {
                res = res + "r";
            } else {
                res = res + "-";
            }
            if (dirFile.canWrite()) {
                res = res + "w";
            } else {
                res = res + "-";
            }
            if (dirFile.canExecute()) {
                res = res + "x";
            } else {
                res = res + "-";
            }
            System.out.println(res);
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static void readFile(String dir) {

        try {
            File dirFile = new File(dir);
            Scanner myReader = new Scanner(dirFile);

            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                System.out.println(data);
            }
            myReader.close();
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static void setMode(String dir, String mod) {

        try {
            File dirFile = new File(dir);
            char[] splitMod = mod.toCharArray();

            if (mod.length() == 3 && (splitMod[0] == 'r' || splitMod[0] == '-') && (splitMod[1] == 'w' || splitMod[1] == '-') && (splitMod[2] == 'x' || splitMod[2] == '-')) {
                dirFile.setReadable(splitMod[0] == 'r');
                dirFile.setWritable(splitMod[1] == 'w');
                dirFile.setExecutable(splitMod[2] == 'x');
            } else {
                System.out.println("Incorrect");
            }
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static void appendAtEnd(String dir) {

        try {
            FileWriter file = new FileWriter(dir, true);

            file.write("\n# Autogenerated line");
            file.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void helpCommand() {
        try {
            File file = new File("help.txt");
            Scanner obj = new Scanner(file);
            while (obj.hasNextLine()) {
                System.out.println(obj.nextLine());
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void backupFile(String dir) {

        try {
            LocalDateTime myDateObj = LocalDateTime.now();
            DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("dd-MM-yyyy");
            String formattedDate = myDateObj.format(myFormatObj);

            Path source = Paths.get(dir);
            Path target = Paths.get("./temp/" + formattedDate + ".backup");
            Files.copy(source, target);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public static void findLongest(String dir) {

        try {
            File dirFile = new File(dir);
            Scanner myReader = new Scanner(dirFile);
            String longestWord = "";
            while (myReader.hasNextLine()) {
                String data = myReader.nextLine();
                String[] words = data.split(" ", 0);
                for(String s : words) {
                    if(s.length() > longestWord.length()) {
                        longestWord = s;
                    }
                }
            }
            System.out.println(longestWord);
            myReader.close();
        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        helpCommand();

        while (true) {
            System.out.print("> ");

            String command = scanner.nextLine();
            String[] temporarySplitCommand = command.split(" ", 0);

            if(temporarySplitCommand.length == 1) {
                if (temporarySplitCommand[0].equals("exit")) {
                    return;
                }
                if (temporarySplitCommand[0].equals("help")) {
                    helpCommand();
                    continue;
                }
                command = command + " ./";
            }

            String[] splitCommand = command.split(" ", 0);

            if(splitCommand.length == 2) {
                if (splitCommand[0].equals("ls")) {
                    listDirectory(splitCommand[1]);
                    continue;
                }
                if (splitCommand[0].equals("ls_py")) {
                    listPythonFiles(splitCommand[1]);
                    continue;
                }
                if (splitCommand[0].equals("is_dir")) {
                    isFileDirectory(splitCommand[1]);
                    continue;
                }
                if (splitCommand[0].equals("define")) {
                    defineDirectory(splitCommand[1]);
                    continue;
                }
                if (splitCommand[0].equals("readmod")) {
                    defineMode(splitCommand[1]);
                    continue;
                }
                if (splitCommand[0].equals("cat")) {
                    readFile(splitCommand[1]);
                    continue;
                }
                if (splitCommand[0].equals("append")) {
                    appendAtEnd(splitCommand[1]);
                    continue;
                }
                if (splitCommand[0].equals("bc")) {
                    backupFile(splitCommand[1]);
                    continue;
                }
                if (splitCommand[0].equals("greplong")) {
                    findLongest(splitCommand[1]);
                    continue;
                }
            }
            if (splitCommand.length == 3 && splitCommand[0].equals("setmod")) {
                setMode(splitCommand[1], splitCommand[2]);
                continue;
            }
            System.out.println("Incorrect command\n");
        }

    }

}
